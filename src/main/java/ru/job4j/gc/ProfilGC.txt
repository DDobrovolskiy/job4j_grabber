Анализ проведен с помощью jconsole и jmap.
В приложение grabber используется следующие параметры: -Xlog:gc* -XX:+UseParallelGC (-Xms2m -Xmx10m для выхода за пределы памяти)
Из анализа графиков Load.JPG и Load_2.JPG можно сделать следующие выводы:
При функционировании без ограничений
а) Максимальная загрузка CPU достигала 6%
б) Максимальный объём используемой памяти достигает 70 мб. так как создаётся большая коллекция из вакансий для последующего
сохранения их в базу данных. График - имеет переодический вид, так как запускается с переодичностью две минуты.
! - из анализа выявил что: коллекция вакансий остается доступной после ее парсинга с сайта и переходит из young в survivor и
занимет место в памяти, только после очередного запуска сканирования старая коллекция становится не доступной и
уничтожаются сборщиком мусора. Память освобождается.
! - как вирант после загрузки данных на сервер необходимо очистить коллекцию, либо по мере загрузки на сервер
очищать коллекцию (либо перейти с LinkArray на Queue);

3) Чтобы добиться состояние выхода за пределы памяти - установил ключи
-Xms2m (начальнй объём памяти 2 м)
-Xmx10m (максимальный доступный объём доступной памяти 10 м) при меньших значениях приложение валится с OutOfMemoryException.
Из анализа Fails_Load.JPG и Fails_Load_2.JPG видно, что объём расходуемой памяти доходит до 9,4 мб.
При этом - максимальный объём загрузки CPU достигает 20%, что вызвано тем, что приложение пытается
выполнить свою задачу и активно работает GС.
К моменту окончания работы приложения - было выполнено 85 сборок в young
и 39 сборок в Old. Объем использования heap достиг ~100%, non-heap 25%